bash -c "$(base64 -d <<< "\
#!/usr/bin/bash

clear
figlet -c "NIS Toolkit."
echo -e "\e[1;31m <<--------{ National Indonesia Security }-------->> \e[0m"
echo -e "\e[1;31m <<--------{ Developers By 3030 }-------->> \e[0m"
echo -e "\e[1;33m 3031   :   XSVSCyb3r \e[0m"
echo -e "\e[1;33m 3032   :   XXSec101 \e[0m"
echo -e "\e[1;33m 3033   :   Reviyyan Kalaznikov \e[0m"
echo -e "\e[1;33m 3034   :   Sachi Henakyy \e[0m"
echo -e "\e[1;33m 3035   :   Anna Petrovna Ivanova \e[0m"
echo -e "\e[1;33m 3036   :   Ekaterina Mikhailovna Sokolova \e[0m"
echo -e "\e[1;33m 3037   :   Yoon Soo Kyung \e[0m"
echo -e "\e[1;33m 3038   :   Putri Nabilla \e[0m"
echo -e "\e[1;33m 3039   :   Lee Hyen Jin \e[0m"
echo -e "\e[1;31m <<--------{ National Indonesia Security }-------->> \e[0m"

sleep 4

clear

sleep 1

figlet -c "NIS Toolkit"
echo -e "\e[1;31m <<--------Toolkit Categories-------->> \e[0m"
echo -e "\e[1;33m 1). Information Gathering \e[0m"
echo -e "\e[1;33m 2). Vulnerabilty Analysis \e[0m"
echo -e "\e[1;33m 3). Exploitation Tools \e[0m"
echo -e "\e[1;33m 4). Sniffing & Spoofing \e[0m"
echo -e "\e[1;33m 5). Android Hacking \e[0m"
echo -e "\e[1;33m 6). Brute Force Tools \e[0m"
echo -e "\e[1;33m 7). Phishing Tools \e[0m"
echo -e "\e[1;33m 8). OS installer \e[0m"
echo -e "\e[1;33m 9). Credits \e[0m"
echo -e "\e[1;33m A). Press A for installing All \e[0m"
echo -e "\e[1;33m X). For Exit \e[0m"

read -p "# Enter an option to continue: " option
case $option in
	1).
		clear 
		figlet -c "NIS Toolkit"
		echo "<<--------Menu-------->>"
		echo "1). Lazy Recon"
		echo "2). Red Hawk"
		echo "3). Th3inspector"
		echo "4). WPGrabInfo"
		echo "5). BillCipher"
		echo "6). Gasmask"
		echo "7). Webkiller"
		echo "8). FBI"
		echo "9). D-Tect"
		echo "10). UserRecon"
		echo "A). Press A for All"
		echo "B). Press B for Back"
		echo "X). For exit"

		read -p "# Enter an option to continue: " ichoice
		case $ichoice in
			1).
		clear
    figlet -c "NIS Toolkit"
		echo "<<--------Installing LazyRecon-------->>"

		git clone --depth=1 https://github.com/nahamsec/lazyrecon
	;;
			2).
		clear
    figlet -c "NIS Toolkit"
		echo "<<--------Installing Red Hawk-------->>"

		git clone --depth=1 https://github.com/Tuhinshubhra/RED_HAWK
	;;
			3).
		clear
  	figlet -c "NIS Toolkit"
		echo "<<--------Installing Th3inspector-------->>"

				git clone --depth=1 https://github.com/Moham3dRiahi/Th3inspector
				;;
			4).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing WPGrabINfo-------->>"	
				git clone --depth=1 https://github.com/Moham3dRiahi/WPGrabInfo
				;;
			5).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing BillCipher-------->>"
				git clone --depth=1 https://github.com/GitHackTools/BillCipher
				;;
			6).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing Gasmask-------->>"
				git clone --depth=1 https://github.com/twelvesec/gasmask
				;;
			7).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing WebKiller-------->>"
				git clone --depth=1 https://github.com/ultrasecurity/webkiller
				;;
			8).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing FBI-------->>"
				
				git clone --depth=1 https://github.com/KnightSec-Official/FBI
				;;

			9).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing D-Tect-------->>"	
				git clone --depth=1 https://github.com/hudacbr/D-TECT
				;;
			10).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing UserRecon-------->>"
				git clone --depth=1 https://github.com/issamelferkh/userrecon
				;;
			A).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing All at once-------->>"

				git clone --depth=1 https://github.com/nahamsec/lazyrecon
				git clone --depth=1 https://github.com/Tuhinshubhra/RED_HAWK
				git clone --depth=1 https://github.com/Moham3dRiahi/Th3inspector
				git clone --depth=1 https://github.com/Moham3dRiahi/WPGrabInfo
				git clone --depth=1 https://github.com/GitHackTools/BillCipher
				git clone --depth=1 https://github.com/twelvesec/gasmask
				git clone --depth=1 https://github.com/ultrasecurity/webkiller
				git clone --depth=1 https://github.com/KnightSec-Official/FBI
				git clone --depth=1 https://github.com/hudacbr/D-TECT
				git clone --depth=1 https://github.com/issamelferkh/userrecon
				;;
			B).
				bash NIS-Toolkit.sh
				;;
			X)
				exit
				;;
			*)
				exit
				;;
		esac
		;;
	2).
		clear
		figlet -c "NIS Toolkit"
		echo "<<--------Menu-------->>"
		echo "1). OwScan"
		echo "2). CMS Map"
		echo "3). Click Jacking Scanner"
		echo "4). TM-Scanner"
		echo "5). AndroBug Framework"
		echo "6). SQLI Scan"
		echo "7). Commix"
		echo "8). WpSeku"
		echo "9). RouterSploit Framework"
		echo "10). Nikto Web Server Scanner"
		echo "A). Press A for installing All"
		echo "B). Press B for Main Menu"
		echo "X). Press X for exit"

		read -p "# Enter the Choice: " vchoice
		case $vchoice in
			1).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing OwScan-------->>"
				git clone --depth=1 https://github.com/Gameye98/OWScan
				;;
			2).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing CMS Map-------->>"
				git clone --depth=1 https://github.com/Dionach/CMSmap
				;;
			3).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing ClickJacking-------->>"
				git clone --depth=1 https://github.com/D4Vinci/Clickjacking-Tester
				;;
			4).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing TM-Scanner-------->>"
				git clone --depth=1 https://github.com/TechnicalMujeeb/TM-scanner
				;;
			5).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing AndroBug-------->>"
				git clone --depth=1 https://github.com/AndroBugs/AndroBugs_Framework
				;;
			6).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing SQLI Scan-------->>"
				git clone --depth=1 https://github.com/bambish/ScanQLi
				;;
			7).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing Commix-------->>"
				git clone --depth=1 https://github.com/commixproject/commix
				;;
			8).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing WpSEku-------->>"
				git clone --depth=1 https://github.com/m4ll0k/WPSeku 
				;;
			9).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing RouterSploit-------->>"
				git clone --depth=1 https://github.com/threat9/routersploit
				;;
			10).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing Nikto Web-------->>"
				git clone --depth=1 https://github.com/sullo/nikto
				;;
			A).
				clear
figlet -c "NIS Toolkit"
				echo "<<--------Installing All Tools-------->>"
				git clone --depth=1 https://github.com/Gameye98/OWScan
				git clone --depth=1 https://github.com/AndroBugs/AndroBugs_Framework
				git clone --depth=1 https://github.com/TechnicalMujeeb/TM-scanner
				git clone --depth=1 https://github.com/D4Vinci/Clickjacking-Tester
				git clone --depth=1 https://github.com/Dionach/CMSmap
				git clone --depth=1 https://github.com/bambish/ScanQLi
				git clone --depth=1 https://github.com/commixproject/commix
				git clone --depth=1 https://github.com/m4ll0k/WPSeku
				git clone --depth=1 https://github.com/threat9/routersploit
				git clone --depth=1 https://github.com/sullo/nikto
				;;
			B).
				bash NIS-Toolkit.sh
				;;
			X).
				exit
				;;
			*)
				echo "I don't understand you"
				exit
				;;
		esac
		;;
	3).        
        	    clear
figlet -c "NIS Toolkit"
        echo "<<--------Menu-------->>"
        echo "1).  A-RAT Exploit"
        echo "2).  Golden-Eye"
        echo "3).  Hulk[Dos Tool]"
        echo "4).  CMSeek" 
        echo "5).  MetaSploit Framework"
        echo "6).  TM-Venom"
        echo "7).  Zarp-Local Network Tool"
        echo "8).  AutoSploit"
        echo "9).  EggShell"
		    echo "10). Brutal" 
		    echo "A).  Press A for All"
		    echo "B).  Press B for Back" 
		    echo "X).  For Exit"

		    read -p "# Enter an option to continue: " echoice
		    case $echoice in
		            1).      
		                    clear
figlet -c "NIS Toolkit"
echo "<<--------Installing  A-RAT Exploit-------->>"

git clone --depth=1 https://github.com/AhMyth/AhMyth-Android-RAT
		                    ;;
		            2).
		                    clear
figlet -c "NIS Toolkit"
echo "<<--------Installing  Golden-Eye-------->>"

git clone --depth=1 https://github.com/jseidl/GoldenEye
		                    ;;
		            3).
		            	clear
figlet -c "NIS Toolkit"

echo "<<--------Installing Hulk[Dos Tool-------->>"

git clone --depth=1 https://github.com/grafov/hulk
		                    ;;
		           
		            4).      
		            		clear
figlet -c "NIS Toolkit"

echo "<<--------Installing CMSeek-------->>"       

git clone --depth=1 https://github.com/Tuhinshubhra/CMSeeK                         
		                    ;;
		            5).     
		            	clear
figlet -c "NIS Toolkit" 
echo "<<--------Installing MetaSploit Framework-------->>"       

git clone --depth=1 https://github.com/rapid7/metasploit-framework               
		                    ;;               
		            6).      
		                   clear
figlet -c "NIS Toolkit"
echo "<<--------Installing TM-Venom-------->>"       

git clone --depth=1 https://github.com/TechnicalMujeeb/tmvenom               
		                    ;;        
		            7).      
clear
figlet -c "NIS-Toolkit"
echo "<<--------Installing Zarp-Local Network Tool-------->>"       

git clone --depth=1 https://github.com/hatRiot/zarp          
		                    ;;   
		            8).      
		            	clear
figlet -c "NIS Toolkit"
echo "<<--------Installing AutoSploit-------->>"       

git clone --depth=1 https://github.com/NullArray/AutoSploit                     
		                    ;;    
		            9).      
		            		clear
figlet -c "NIS Toolkit"
echo "<<--------Installing EggShell-------->>"       

git clone --depth=1 https://github.com/neoneggplant/EggShell                    
		                    ;;   
		            10).      
		                    clear
figlet -c "NIS Toolkit"
echo "<<--------Installing  Brutal-------->>"       

git clone --depth=1 https://github.com/Screetsec/Brutal                         
		                    ;;            
		            A).      
		                    clear
figlet -c "NIS Toolkit"
echo "<<--------Installing All Tools-------->>"        
git clone --depth=1 https://github.com/AhMyth/AhMyth-Android-RAT    
git clone --depth=1 https://github.com/jseidl/GoldenEye       
git clone --depth=1 https://github.com/grafov/hulk           
git clone --depth=1 https://github.com/Tuhinshubhra/CMSeeK            
git clone --depth=1 https://github.com/rapid7/metasploit-framework
git clone --depth=1 https://github.com/TechnicalMujeeb/tmvenom           
git clone --depth=1 https://github.com/hatRiot/zarp            
git clone --depth=1 https://github.com/NullArray/AutoSploit
git clone --depth=1 https://github.com/neoneggplant/EggShell              
git clone --depth=1 https://github.com/Screetsec/Brutal
		                    ;;     
		            B).     
		                    bash NIS-Toolkit.sh
		                    ;;
		            X).      
		                    exit
		                    ;;
		            *)      
		                    echo "i don't understand you"   
		                    exit 
		                    ;;
		    esac
		   ;;
	4).
		    clear
		    figlet -c "NIS Toolkit"
		    echo "<<--------Menu-------->>"
		    echo "1). Setoolkit "
		    echo "2). SSLtrip"
		    echo "3). pyPISHER" 
		    echo "4). SMTP Mailer" 
		    echo "5). Python Packet Sniffer"
		    echo "A). Press A for All"
		    echo "B). Press B for Back" 
		    echo "X). For Exit"

		    read -p "# Enter an option to continue: " schoice
		    case $schoice in
		            1).     
		            	    clear
                    	    figlet -c "NIS Toolkit" 
		                    echo "<<--------Installing Setoolkit-------->>"
		                    git clone --depth=1 https://github.com/trustedsec/social-engineer-toolkit
		                    ;;
		            2).
		            	   clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing SSLtrip-------->>"
		                    git clone --depth=1 https://github.com/moxie0/sslstrip
		                    ;;
		            3).
		            	    clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing pyPISHER-------->>"
		                    git clone --depth=1 https://github.com/sneakerhax/PyPhisher
		                    ;;
		           
		            4).      
		            	    clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing SMTP Mailer-------->>"       
		                    git clone --depth=1 https://github.com/halojoy/PHP-SMTP-Mailer             
		                    ;;
		            5).     
		            
		                    clear
                    	    figlet -c "NIS Toolkit" 
		                    echo "<<--------Installing  Python Packet Sniffer-------->>"
		                    git clone --depth=1 https://github.com/buckyroberts/Python-Packet-Sniffer           
		                    ;;  
		          
		            A).      
		            	    clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing All Tools-------->>"        
		                    git clone --depth=1 https://github.com/trustedsec/social-engineer-toolkit
		                    git clone --depth=1 https://github.com/moxie0/sslstrip     
		                    git clone --depth=1 https://github.com/sneakerhax/PyPhisher
		                    git clone --depth=1 https://github.com/halojoy/PHP-SMTP-Mailer           
		                    git clone --depth=1 https://github.com/buckyroberts/Python-Packet-Sniffer       
		                                             
		                    ;;     
		            B).     
		                    bash NIS-Toolkit.sh
		                    ;;
		            X).      
		                    exit
		                    ;;
		            *)      
		                    echo "i don't understand you"   
		                    exit 
		                    ;;
		                                               
			    esac
			    ;;
		5).      
		    clear
		    figlet -c "NIS Toolkit"
		    echo "<<--------Menu-------->>"
		    echo "1).  AndroRat"
		    echo "2).  Csploit"
		    echo "3).  Hackode"
		    echo "A).  Press A for All"
		    echo "B).  Press B for Back" 
		    echo "X).  For Exit"

		    read -p "# Enter an option to continue: " achoice
		    case $achoice in
		            1).      
		            	clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing  AndroRat-------->>"
		                    git clone --depth=1 https://github.com/warecrer/AndroRAT
		                    ;;
		            2).
		                    clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing Csploit-------->>"
		                    git clone --depth=1 https://github.com/cSploit/android
		                    ;;
		            3).
		                    clear
                    	    figlet -c "NIS Toolkit"
		                    echo "<<--------Installing TheFatRat-------->>"
		                    git clone --depth=1 https://github.com/Exploit-install/TheFatRat
		                    ;;         
		            A).      
		                  clear
                    	    	  figlet -c "NIS Toolkit"
		                  echo "<<--------Installing All Tools-------->>"        
		                    git clone --depth=1 https://github.com/warecrer/AndroRAT
		                    git clone --depth=1 https://github.com/cSploit/android   
		                    git clone --depth=1 https://github.com/Exploit-install/TheFatRat                  
		                    ;;     
		            B).     
		                    bash NIS-Toolkit.sh
		                    ;;
		            X).      
		                    exit
		                    ;;
		            *)      
		                    echo "i don't understand you"   
		                    exit 
		                    ;;
			     esac
			     ;;
		  6).        
            clear
            figlet -c "NIS Toolkit"
            echo "<<--------Menu-------->>"
            echo "1).  SocialBox"
            echo "2).  BluForce-FB"
            echo "3).  FaceBoom"
            echo "4).  Instagram"
            echo "5).  Instabrute"
            echo "6).  Brute-force-gmail"
            echo "7).  GmailBruterV2"
            echo "8).  WPBrute"
            echo "9).  Cpanel-Bruter"
            echo "10). RDP-Brute"
            echo "A).  Press A for All"
            echo "B).  Press B for Back" 
            echo "X).  For Exit"

            read -p "# Enter an option to continue: " bchoice
            case $bchoice in
                    1).      
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing  SocialBox-------->>"
                            git clone --depth=1 https://github.com/Cyb0r9/SocialBox
                            ;;
                    2).
                            clear
                    	    figlet -c "NIS Toolkit"
echo "<<--------Installing BluForce-FB-------->>"
git clone --depth=1 https://github.com/AngelSecurityTeam/BluForce-FB
                            ;;
                    3).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing FaceBoom-------->>"
                            git clone --depth=1 https://github.com/Oseid/FaceBoom
                            ;;     
                    4).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Instagram-------->>"
                            git clone --depth=1 https://github.com/Pure-L0G1C/Instagram
                            ;;  
                    5).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Instabrute-------->>"
                            git clone --depth=1 https://github.com/xHak9x/instabrute
                            ;; 
                     6).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Brute-force-gmail-------->>"
                            git clone --depth=1 https://github.com/0xfff0800/Brute-force-gmail
                            ;; 
                     7).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing GmailBruterV2-------->>"
                            git clone --depth=1 https://github.com/DEMON1A/GmailBruterV2
                            ;;  
                     8).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing WPBrute-------->>"
                            git clone --depth=1 https://github.com/BlackXploits/WPBrute
                            ;; 
                     9).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Cpanel-Bruter-------->>"
                            git clone --depth=1 https://github.com/imadoxhunter/Cpanel-Bruter
                            ;; 
                     10).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing RDP-Brute-------->>"
                            git clone --depth=1 https://github.com/TheDevFromKer/RDP-Brute
                            ;;    
                        
                    A).      
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing All Tools-------->>"        
                            git clone --depth=1 https://github.com/Cyb0r9/SocialBox
                            git clone --depth=1 https://github.com/AngelSecurityTeam/BluForce-FB  
                            git clone --depth=1 https://github.com/Oseid/FaceBoom  
                            git clone --depth=1 https://github.com/Pure-L0G1C/Instagram
                            git clone --depth=1 https://github.com/xHak9x/instabrute
                            git clone --depth=1 https://github.com/0xfff0800/Brute-force-gmail
                            git clone --depth=1 https://github.com/DEMON1A/GmailBruterV2
                            git clone --depth=1 https://github.com/BlackXploits/WPBrute
                            git clone --depth=1 https://github.com/TheDevFromKer/RDP-Brute
                            ;;     
                    B).     
                            bash NIS-Toolkit.sh
                            ;;
                    X)      
                            exit
                            ;;
                    *)      
                            echo "i don't understand you"   
                            exit 
                            ;;
			esac
			;; 
	7).        
            clear
            figlet -c "NIS Toolkit"
            echo "<<--------Menu-------->>"
            echo "1).  Shellphish"
            echo "2).  HiddenEye"
            echo "3).  SocialFish"
            echo "4).  Zphisher"
            echo "5).  Blackeye"
            echo "A).  Press A for All"
            echo "B).  Press B for Back" 
            echo "X).  For Exit"

            read -p "# Enter an option to continue: " pchoice
            case $pchoice in
                    1).      
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing  Shellphish-------->>"
                            git clone --depth=1 https://github.com/rorizam323/shellphish
                            ;;
                    2).
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing HiddenEye-------->>"
                            git clone --depth=1 https://github.com/DarkSecDevelopers/HiddenEye
                            ;;
                    3).
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing SocialFish-------->>"
                            git clone --depth=1 https://github.com/An0nUD4Y/SocialFish
                            ;;     
                    4).
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Zphisher-------->>"
                            git clone --depth=1 https://github.com/htr-tech/zphisher
                            ;;  
                    5).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Blackeye-------->>"
                            git clone --depth=1 https://github.com/An0nUD4Y/blackeye
                            ;; 
                        
                    A).      
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing All Tools-------->>"        
                            git clone --depth=1 https://github.com/rorizam323/shellphish
                            git clone --depth=1 https://github.com/DarkSecDevelopers/HiddenEye  
                            git clone --depth=1 https://github.com/An0nUD4Y/SocialFish 
                            git clone --depth=1 https://github.com/htr-tech/zphisher
                            git clone --depth=1 https://github.com/An0nUD4Y/blackeye
                            ;;     
                    B).     
                            bash NIS-Toolkit.sh
                            ;;
                    X).      
                            exit
                            ;;
                    *)      
                            echo "i don't understand you"   
                            exit 
                            ;;
			esac
			;; 
	8).        
            clear
            figlet -c "NIS Toolkit"
            echo "<<--------Menu-------->>"
            echo "1).  Ubuntu"
            echo "2).  Debian"
            echo "3).  Kali Linux"
            echo "4).  Kali Nethunter"
            echo "5).  Backbox"
            echo "6).  Fedora"
            echo "7).  Cent Os"
            echo "8).  Opensuse Leap"
            echo "9).  OpenSUSE tumbleweed"
            echo "10). Arch linux"
            echo "11). Black Arch"
            echo "12). Alpine"
            echo "B).  Press B for Back" 
            echo "X).  For Exit"

            read -p "# Enter an option to continue: " ochoice
            case $ochoice in
                    1).      
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing  Ubuntu-------->>"
                            pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh && bash ubuntu.sh
                            ;;
                    2).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Debian-------->>"
                            pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Debian/debian.sh && bash debian.sh
                            ;;
                    3).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Kali Linux-------->>"
                            pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Kali/kali.sh && bash kali.sh
                            ;;     
                    4).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Kali NetHunter-------->>"
                            pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Nethunter/nethunter.sh && bash nethunter.sh
                            ;;  
                    5).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Backbox-------->>"
                            pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh && bash backbox.sh
                            ;; 
                        
                    6).      
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Fedora-------->>"   
                            pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Fedora/fedora.sh && bash fedora.sh
                            ;;     
                    
                    7).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Cent Os-------->>"
                            pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/CentOS/centos.sh && bash centos.sh
                            ;; 
                        
                    8).      
                    	    clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Opensuse Leap-------->>"        
                            pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/openSUSE/Leap/opensuse-leap.sh && bash opensuse-leap.sh
                      	    ;;
                    9).
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing OpenSUSE Tumbleweed-------->>"
                            pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/openSUSE/Tumbleweed/opensuse-tumbleweed.sh && bash opensuse-tumbleweed.sh
                            ;; 
                        
                    10).      
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Arch Linux-------->>"   
                              pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Arch/armhf/arch.sh && bash arch.sh   
                              ;;
                    11).      
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Black Arch-------->>"
pacman-key --init && pacman-key --populate archlinuxarm && pacman -Sy --noconfirm curl && curl -O https://blackarch.org/strap.sh && chmod +x strap.sh && ./strap.sh
                              ;;
                    12).      
                            clear
                    	    figlet -c "NIS Toolkit"
                            echo "<<--------Installing Alpine-------->>"
                            pkg install wget openssl-tool proot tar -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Alpine/alpine.sh && bash alpine.sh
                              ;;
                    B).     
                            bash NIS-Toolkit.sh
                            ;;
                    X).      
                            exit
                            ;;
                    *)      
                            echo "i don't understand you"   
                            exit 
                            ;;
			esac
			;;
	9).
clear
figlet -c "NIS Toolkit"
echo -e "\e[1;35m <<--------NIS Toolkit-------->> \e[0m"
;;
A).
clear
figlet -c "NIS Toolkit"
echo "<<--------Installing All Yools-------->>"
git clone --depth=1 https://github.com/rorizam323/shellphish
git clone --depth=1 https://github.com/DarkSecDevelopers/HiddenEye  
git clone --depth=1 https://github.com/An0nUD4Y/SocialFish 
git clone --depth=1 https://github.com/htr-tech/zphisher
git clone --depth=1 https://github.com/An0nUD4Y/blackeye
git clone --depth=1 https://github.com/Cyb0r9/SocialBox
git clone --depth=1 https://github.com/AngelSecurityTeam/BluForce-FB  
git clone --depth=1 https://github.com/Oseid/FaceBoom  
git clone --depth=1 https://github.com/Pure-L0G1C/Instagram
git clone --depth=1 https://github.com/xHak9x/instabrute
git clone --depth=1 https://github.com/0xfff0800/Brute-force-gmail
git clone --depth=1 https://github.com/DEMON1A/GmailBruterV2
git clone --depth=1 https://github.com/BlackXploits/WPBrute
git clone --depth=1 https://github.com/TheDevFromKer/RDP-Brute
git clone --depth=1 https://github.com/warecrer/AndroRAT
git clone --depth=1 https://github.com/cSploit/android   
git clone --depth=1 https://github.com/Exploit-install/TheFatRat  
git clone --depth=1 https://github.com/trustedsec/social-engineer-toolkit
git clone --depth=1 https://github.com/moxie0/sslstrip     
git clone --depth=1 https://github.com/sneakerhax/PyPhisher
git clone --depth=1 https://github.com/halojoy/PHP-SMTP-Mailer           
git clone --depth=1 https://github.com/buckyroberts/Python-Packet-Sniffer      
git clone --depth=1 https://github.com/AhMyth/AhMyth-Android-RAT    
git clone --depth=1 https://github.com/jseidl/GoldenEye       
git clone --depth=1 https://github.com/grafov/hulk           
git clone --depth=1 https://github.com/Tuhinshubhra/CMSeeK            
git clone --depth=1 https://github.com/rapid7/metasploit-framework            
git clone --depth=1 https://github.com/TechnicalMujeeb/tmvenom           
git clone --depth=1 https://github.com/hatRiot/zarp            
git clone --depth=1 https://github.com/NullArray/AutoSploit
git clone --depth=1 https://github.com/neoneggplant/EggShell              
git clone --depth=1 https://github.com/Screetsec/Brutal 
git clone --depth=1 https://github.com/Gameye98/OWScan
git clone --depth=1 https://github.com/AndroBugs/AndroBugs_Framework
git clone --depth=1 https://github.com/TechnicalMujeeb/TM-scanner
git clone --depth=1 https://github.com/D4Vinci/Clickjacking-Tester
git clone --depth=1 https://github.com/Dionach/CMSmap
git clone --depth=1 https://github.com/bambish/ScanQLi
git clone --depth=1 https://github.com/commixproject/commix
git clone --depth=1 https://github.com/m4ll0k/WPSeku
git clone --depth=1 https://github.com/threat9/routersploit
git clone --depth=1 https://github.com/sullo/nikto
git clone --depth=1 https://github.com/nahamsec/lazyrecon
git clone --depth=1 https://github.com/Tuhinshubhra/RED_HAWK
git clone --depth=1 https://github.com/Moham3dRiahi/Th3inspector
git clone --depth=1 https://github.com/Moham3dRiahi/WPGrabInfo
git clone --depth=1 https://github.com/GitHackTools/BillCipher
git clone --depth=1 https://github.com/twelvesec/gasmask
git clone --depth=1 https://github.com/ultrasecurity/webkiller
git clone --depth=1 https://github.com/KnightSec-Official/FBI
git clone --depth=1 https://github.com/hudacbr/D-TECT
git clone --depth=1 https://github.com/issamelferkh/userrecon
;;

X)
	exit
	;;

*)
	echo "I don't understand you"
	exit
	;;

 esac



")" bash "$@"
